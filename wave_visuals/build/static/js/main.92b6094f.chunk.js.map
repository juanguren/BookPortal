{"version":3,"sources":["components/BookResults.js","modules/contract.js","App.js","reportWebVitals.js","index.js"],"names":["BookResults","props","savedBooks","data","className","id","map","book","index","address","style","fontWeight","name","timestamp","toString","connection","a","window","eth","ethereum","abi","config","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","dotenv","App","useState","currentAccount","setCurrentAccount","currentBalance","setCurrentBalance","txnIsLoading","setTxnInProgress","txnIsMined","setTxnCompleted","bookTotals","setBookTotals","bookTxnHash","setBookTxnHash","sharedBooks","setSharedBooks","personalBooks","setPersonalBooks","bookName","setBookName","isWinner","setIsWinner","retrieveTotals","bookContract","getTotalBookCount","bookCount","getBookCountPerUser","userBookCount","getTotalBookData","getAllBooks","getBalance","contractBalance","ethBalance","web3","utils","fromWei","forEach","push","sender","book_name","moment","Date","format","Number","console","log","error","walletIsConnected","request","method","authorizedAccount","length","account","connectionStatus","connectWallet","alert","accountRequest","accountToUse","useEffect","shareBook","e","preventDefault","ALCHEMY_KEY","process","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","gasLimit","bookTxn","wait","hash","balance","getBlockNumber","blockNumber","setTimeout","color","background","href","target","rel","onSubmit","type","placeholder","value","onChange","onClick","textDecoration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92b6094f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './styles/BookResults.css';\n\n/* // TODO: Evaluate IPFS to store:\n * Data: js.ipfs.io\n */\nfunction BookResults(props) {\n  const { savedBooks } = props.data;\n\n  return (\n    <div className='main'>\n      {savedBooks ? (\n        <div id='book-data-complete'>\n          {savedBooks.map((book, index) => {\n            return (\n              <ul key={index}>\n                <li>Sender: {book.address}</li>\n                <li style={{ fontWeight: 'bold' }}>Book Name: {book.name}</li>\n                <li>Shared on: {book.timestamp.toString()}</li>\n              </ul>\n            );\n          })}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default BookResults;\n","import { ethers } from 'ethers';\nimport config from '../utils/contract_config.json';\nimport moment from 'moment';\n\nconst contractAddress = '0x4674E4225Ea0fE45693c4F928bBDEf4976AA10d8';\n\nconst connection = async () => {\n  const { ethereum: eth } = window;\n  const { abi } = config;\n  try {\n    // A connection to the blockchain. Web3 interacts with the blockchain using the provider.\n    const provider = new ethers.providers.Web3Provider(eth);\n    // Account for signing the transaction. Can be used to sign messages and transactions\n    const signer = provider.getSigner();\n\n    // Connecting to the whole contract\n    return new ethers.Contract(contractAddress, abi, signer);\n  } catch (error) {\n    return error;\n  }\n};\n\nconst eventListener = (contract) => {\n  contract.on('NewBook', (from, timestamp, book) => {\n    return {\n      address: from,\n      name: book,\n      timestamp: moment(new Date(timestamp * 1000)).format(\n        'MMMM Do YYYY, h:mm:ss a'\n      ),\n    };\n  });\n};\n\n//setBookTotals(previousState => [...previousState, eventListenewr]);\n\nexport { connection, contractAddress, eventListener };\n","import * as React from 'react';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport BookResults from './components/BookResults';\nimport { connection } from './modules/contract';\nimport web3 from 'web3';\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\nimport moment from 'moment';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [currentBalance, setCurrentBalance] = useState(0);\n  const [txnIsLoading, setTxnInProgress] = useState(false);\n  const [txnIsMined, setTxnCompleted] = useState(false);\n  const [bookTotals, setBookTotals] = useState(null);\n  const [bookTxnHash, setBookTxnHash] = useState('');\n  const [sharedBooks, setSharedBooks] = useState(0);\n  const [personalBooks, setPersonalBooks] = useState(0);\n  const [bookName, setBookName] = useState('');\n  const [isWinner, setIsWinner] = useState(false);\n\n  const retrieveTotals = async () => {\n    const savedBooks = [];\n    try {\n      const bookContract = await connection();\n      const bookCount = await bookContract.getTotalBookCount();\n      const userBookCount = await bookContract.getBookCountPerUser(\n        currentAccount\n      );\n      const getAllBooks = await bookContract.getTotalBookData();\n      const contractBalance = await bookContract.getBalance();\n      const ethBalance = web3.utils.fromWei(\n        contractBalance.toString(),\n        'ether'\n      );\n      //console.log({ getAllBooks });\n      getAllBooks.forEach((book) => {\n        savedBooks.push({\n          address: book.sender,\n          name: book.book_name,\n          timestamp: moment(new Date(book.timestamp * 1000)).format(\n            'MMMM Do YYYY, h:mm:ss a'\n          ),\n        });\n      });\n\n      setSharedBooks(bookCount.toString());\n      setPersonalBooks(userBookCount.toString());\n      setBookTotals({ savedBooks });\n      setCurrentBalance(Number(ethBalance));\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  const walletIsConnected = async () => {\n    const { ethereum: eth } = window; // Injected by Metamask into the browser\n    // TODO: Change this to a notification handler function. No alerts.\n\n    try {\n      const authorizedAccount = await eth.request({ method: 'eth_accounts' });\n      if (authorizedAccount.length > 0) {\n        const account = authorizedAccount[0];\n        setCurrentAccount(account); // Saves current session's account;\n      } else {\n        console.log({ connectionStatus: 'No authorized Metamask account' });\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum: eth } = window;\n      if (!eth) return alert('Remember to install Metamask Wallet!'); // TODO: Notification handler\n\n      const accountRequest = await eth.request({\n        method: 'eth_requestAccounts',\n      });\n      const accountToUse = accountRequest[0];\n      console.log({ connectionStatus: `Connected! ${accountToUse}` });\n\n      setCurrentAccount(accountToUse);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    walletIsConnected();\n    retrieveTotals();\n  });\n\n  const shareBook = async (e) => {\n    e.preventDefault();\n    const { REACT_APP_ALCHEMY_KEY: ALCHEMY_KEY } = process.env;\n    if (bookName.length <= 2) return;\n\n    try {\n      const bookContract = await connection();\n      const web3 = createAlchemyWeb3(ALCHEMY_KEY);\n\n      const bookTxn = await bookContract.shareBook(bookName, {\n        gasLimit: 300000,\n      });\n      setTxnInProgress(true); // Only if metamask's pop-up gets accepted\n      console.log('Mining...');\n      await bookTxn.wait(); // Waits while the computation is executed by miners\n      setBookTxnHash(bookTxn.hash);\n\n      const balance = await bookContract.getBalance();\n      const ethBalance = web3.utils.fromWei(balance.toString(), 'ether');\n\n      if (bookTxn.hash) {\n        const blockNumber = await web3.eth.getBlockNumber();\n\n        console.log({\n          hash: bookTxn.hash,\n          contractBalance: ethBalance,\n          blockNumber,\n        });\n\n        setTxnInProgress(false);\n        setTxnCompleted(true);\n        setBookName('');\n\n        if (ethBalance < currentBalance) setIsWinner(true);\n\n        setTimeout(() => {\n          setTxnCompleted(false);\n          setIsWinner(false);\n        }, 7000);\n      }\n    } catch (error) {\n      console.log(error); // TODO: Notification handler\n      setTxnCompleted(false);\n      setIsWinner(false);\n      setBookName('');\n      setTxnInProgress(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className='mainContainer'>\n        <div className='dataContainer'>\n          <div className='header'> Book Portal 📖 </div>\n          {isWinner ? <h3>You win 0.001 eth 🎉</h3> : null}\n          <h1> Hi! I'm Juan 👋 </h1>\n          <p className='bio'>\n            I'm a Software Dev learning Blockchain development. I LOVE reading,\n            so I created BookPortal, an app that lets you share books with me\n            (and everyone else). On the Blockchain! <br /> To use it, please\n            connect your <span style={{ fontWeight: 'bold' }}> Metamask </span>{' '}\n            wallet and share your favorite book(s)!\n          </p>\n\n          {txnIsLoading ? (\n            <h4 style={{ color: 'white', background: 'crimson' }}>\n              Mining! Please wait...\n            </h4>\n          ) : null}\n\n          {txnIsMined ? (\n            <div>\n              <h4>\n                Received! Your book has been{' '}\n                <a\n                  href={`https://rinkeby.etherscan.io/tx/${bookTxnHash}`}\n                  target='_blank'\n                  rel='noreferrer'\n                  id='etherscan_link'\n                >\n                  recorded\n                </a>{' '}\n                on the blockchain!\n              </h4>\n            </div>\n          ) : null}\n\n          {currentAccount ? (\n            <div className='book-results'>\n              <div>\n                <h4>\n                  Total Books: <span> {sharedBooks} </span>\n                </h4>\n              </div>\n              <div>\n                <h4>\n                  Your Books: <span> {personalBooks} </span>\n                </h4>\n              </div>\n            </div>\n          ) : null}\n\n          {currentAccount ? (\n            <form onSubmit={shareBook}>\n              <input\n                type='text'\n                className='waveText'\n                placeholder='book here'\n                value={bookName}\n                onChange={(e) => setBookName(e.target.value)}\n              ></input>\n              <button type='submit' className='waveButton'>\n                Share Book!\n              </button>\n            </form>\n          ) : null}\n\n          {currentAccount ? null : (\n            <button className='waveButton' onClick={connectWallet}>\n              Connect your Wallet\n            </button>\n          )}\n          <p></p>\n        </div>\n      </div>\n      <footer>\n        <h4>\n          Built with ⚡ by{' '}\n          <a\n            style={{ textDecoration: 'none' }}\n            href='https://twitter.com/juanguren'\n            target='_blank'\n            rel='noreferrer'\n          >\n            @juanguren\n          </a>\n        </h4>\n      </footer>\n      {bookTotals ? <BookResults data={bookTotals} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}